# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.wheel]
packages = ["src/argon2"]


[project]
name = "argon2-cffi"
description = "Argon2 for Python"
authors = [{ name = "Hynek Schlawack", email = "hs@ox.cx" }]
dynamic = ["version", "readme"]
requires-python = ">=3.7"
license = { file = "LICENSE" }
keywords = ["password", "hash", "hashing", "security"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python",
    "Topic :: Security :: Cryptography",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "argon2-cffi-bindings",
    "typing-extensions; python_version < '3.8'", # cf. _typing.py module
]

[project.optional-dependencies]
tests = ["hypothesis", "pytest"]
docs = ["sphinx", "sphinx-notfound-page", "furo", "myst-parser"]
dev = ["argon2-cffi[tests,docs]", "mypy"]

[project.urls]
Documentation = "https://argon2-cffi.readthedocs.io/"
Changelog = "https://github.com/hynek/argon2-cffi/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/hynek/argon2-cffi"
Funding = "https://github.com/sponsors/hynek"
Tidelift = "https://tidelift.com/subscription/pkg/pypi-argon2-cffi?utm_source=pypi-argon2-cffi&utm_medium=pypi"
Ko-fi = "https://ko-fi.com/the_hynek"


[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }


[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """


## Release Information for """

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
start-after = "<!-- changelog follows -->"
pattern = "## ([^\n]+?\n\n)###"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "CHANGELOG.md"
start-after = "<!-- changelog follows -->"
pattern = "\n(###.+?\n)## "

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = "## Credits\n"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "AUTHORS.md"
start-after = "# Credits & License\n"


[tool.pytest.ini_options]
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
testpaths = "tests"
filterwarnings = ["once::Warning"]


[tool.coverage.run]
parallel = true
branch = true
source = ["argon2"]

[tool.coverage.paths]
source = ["src", ".tox/py*/**/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # a more strict default pragma
    "\\# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",
]
omit = []


[tool.mypy]
show_error_codes = true

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

# sometimes redefinition is just fine
allow_redefinition = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "conftest.*"
ignore_errors = true


[tool.black]
line-length = 79


[tool.isort]
profile = "attrs"
