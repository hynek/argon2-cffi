[tox]
min_version = 4
env_list =
    pre-commit,
    mypy-pkg,
    py3{7,8,9,10,11,12}-{tests,mypy}
    py311-bindings-main,
    pypy3-tests,
    system-argon2,
    docs,
    coverage-report


[testenv]
description = Run tests and do NOT measure coverage / type-check.
package = wheel
wheel_build_env = .pkg
extras =
    tests: tests
    mypy: typing
pass_env =
    FORCE_COLOR
    NO_COLOR
commands =
    tests: pytest {posargs}
    tests: python -Im argon2 -n 1 -t 1 -m 8 -p 1
    mypy: mypy tests/typing


[testenv:py3{7,11}-tests]
description = Run tests and measure coverage.
deps =
    coverage[toml]
commands =
    coverage run -m pytest {posargs}
    coverage run -m argon2 -n 1 -t 1 -m 8 -p 1
    coverage run -m argon2 --profile CHEAPEST


[testenv:coverage-report]
description = Report coverage over all test runs.
skip_install = true
depends = py3{7,11}
deps = coverage[toml]
parallel_show_output = true
commands =
    coverage combine
    coverage report


[testenv:system-argon2]
description = Run tests against bindings that use a system installation of Argon2.
set_env = ARGON2_CFFI_USE_SYSTEM=1
install_command = pip install {opts} --no-binary=argon2-cffi-bindings {packages}


[testenv:py311-bindings-main]
description = Run tests against the current main branch of argon2-cffi-bindings
extras =
deps =
install_command = pip install {opts} --no-deps {packages}
commands_pre = pip install -I hypothesis pytest git+https://github.com/hynek/argon2-cffi-bindings


[testenv:pre-commit]
description = Run all pre-commit hooks.
skip_install = true
deps = pre-commit
commands = pre-commit run --all-files


[testenv:pyright]
# Install and configure node and pyright
# Use nodeenv to configure node in the running tox virtual environment
# Seeing errors using "nodeenv -p"
# Use npm install -g to install "globally" into the virtual environment
# Does not run by default locally because it's slow.
deps = nodeenv
extras = typing
commands_pre =
    nodeenv --prebuilt --node=lts --force {envdir}
    npm install -g --no-package-lock --no-save pyright
    pyright --version
commands = pyright tests/typing src


[testenv:mypy-pkg]
description = Check own code.
deps = mypy
commands = mypy src


[testenv:docs]
description = Build docs and run doctests.
# Keep base_python in-sync with .readthedocs.yaml and ci.yml/docs.
base_python = py311
extras = docs
commands =
    python -Im doctest README.md
    sphinx-build -W -n -b html -d {envtmpdir}/doctrees docs docs/_build/html
    sphinx-build -W -n -b doctest -d {envtmpdir}/doctrees docs docs/_build/html

[testenv:docs-watch]
package = editable
base_python = {[testenv:docs]base_python}
extras = {[testenv:docs]extras}
deps = watchfiles
commands =
    watchfiles \
        --ignore-paths docs/_build/ \
        'sphinx-build -W -n --jobs auto -b html -d {envtmpdir}/doctrees docs docs/_build/html' \
        src \
        docs \
        README.md \
        CHANGELOG.md

[testenv:docs-linkcheck]
base_python = {[testenv:docs]base_python}
extras = {[testenv:docs]extras}
commands = sphinx-build -W -b linkcheck -d {envtmpdir}/doctrees docs docs/_build/html
