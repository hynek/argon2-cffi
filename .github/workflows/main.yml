---
name: CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  # Allow rebuilds via API.
  repository_dispatch:
    types: rebuild

jobs:
  tests:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: "2.7,3.5,3.6,3.7,3.8"

    strategy:
      matrix:
        python-version: ["2.7", "3.5", "3.6", "3.7", "3.8", "3.9", "pypy2", "pypy3"]

    steps:
      - uses: "actions/checkout@v2"
        with:
          submodules: "recursive"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: "python -m tox"

      - name: "Combine coverage"
        run: |
          set -xe
          python -m coverage combine
          python -m coverage xml
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
      - name: "Upload coverage to Codecov"
        uses: "codecov/codecov-action@v1"
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        with:
          fail_ci_if_error: true

  tests_aarch64:
    name: "${{ matrix.PYTHON }} manylinux2014-aarch64"
    runs-on: ubuntu-latest
    strategy:
       matrix:
        PYTHON: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
    steps:
      - uses: "actions/checkout@v2"
        with:
          submodules: "recursive"
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - uses: docker://quay.io/pypa/manylinux2014_aarch64
        with:
          args: |
              bash -c "set -xe;
              /opt/python/${{ matrix.PYTHON }}/bin/python -m venv .venv;
              source .venv/bin/activate;
              .venv/bin/python -VV;
              .venv/bin/python -m site;
              .venv/bin/pip install --upgrade pip setuptools wheel;
              .venv/bin/pip install --upgrade coverage[toml] virtualenv tox tox-gh-actions;
              .venv/bin/python -m tox;
              .venv/bin/python -m coverage combine;
              .venv/bin/python -m coverage xml; "

  system-package:
    runs-on: "ubuntu-latest"
    name: "Install and test with system package of Argon2."
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.8"
      - name: "Install dependencies"
        run: |
          set -xe
          sudo apt-get install libargon2-0=0~20161029-1.1 libargon2-0-dev=0~20161029-1.1
          # Ensure we cannot use our own Argon2 by accident.
          rm -rf extras
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade virtualenv tox

      - name: "Run tox -e system-argon2"
        run: "python -m tox -e system-argon2"

  package:
    name: "Build & verify package"
    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2"
        with:
          submodules: "recursive"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"

      - name: "Install pep517 and twine"
        run: "python -m pip install pep517 twine"
      - name: "Build package"
        run: "python -m pep517.build --source --binary ."
      - name: "List result"
        run: "ls -l dist"
      - name: "Check long_description"
        run: "python -m twine check dist/*"

  install-dev:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: "Verify dev env"
    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2"
        with:
          submodules: "recursive"
      - uses: "actions/setup-python@v2"
        with:
          python-version: "3.9"
      - name: "Install in dev mode"
        run: |
          python setup.py build
          python -m pip install -e .[dev]
      - name: "Import package"
        run: "python -c 'import argon2; print(argon2.__version__)'"
