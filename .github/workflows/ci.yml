---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  TOX_TESTENV_PASSENV: FORCE_COLOR
  SETUPTOOLS_SCM_PRETEND_VERSION: "1.0" # avoid warnings about shallow checkout
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  # N.B. default Python version for setup-python comes from the .python-version
  # file at the root of the project.

permissions:
  contents: read

jobs:
  tests:
    name: Tests & Mypy on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "pypy-3.7"
          - "pypy-3.8"
          - "pypy-3.9"

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip

      - name: Prepare tox & run tests
        run: |
          V=${{ matrix.python-version }}
          if [[ "$V" = pypy-* ]]; then
            V=pypy3
          else
            V=py$(echo $V | tr -d .)
          fi

          python -Im pip install tox

          python -Im tox run -f $V
      - run: python -Im tox run -e mypy-api
        if: ${{ !startsWith(matrix.python-version, 'pypy-') }}

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          cache: pip
      - uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -Im pip install coverage[toml]

          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  system-package:
    name: Install & test with system package of Argon2.
    runs-on: ubuntu-latest
    env:
      SETUPTOOLS_SCM_PRETEND_VERSION: "" # inconsistency error otherwise

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          cache: pip

      - name: Install dependencies & run tox
        run: |
          sudo apt-get install libargon2-0 libargon2-0-dev
          python -VV
          python -Im site
          python -Im pip install --upgrade wheel tox

          python -Im tox run -e system-argon2

  mypy:
    name: Type-check code base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4

      - name: Prepare & run tox
        run: |
          python -Im pip install tox
          python -Im tox run -e mypy-pkg

  docs:
    name: Build docs & run doctests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          # Keep in-sync with .readthedocs.yaml and tox.ini/docs.
          python-version: "3.11"

      - name: Prepare & run tox
        run: |
          python -Im pip install tox
          python -Im tox run -e docs

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4

      - name: Install in dev mode and run CLI
        run: |
         python -Im pip install -e .[dev]
         python -Im argon2 -n 1 -t 1 -m 8 -p 1

  # Ensure everything required is passing for branch protection.
  required-checks-pass:
    if: always()

    needs:
      - coverage
      - mypy
      - docs
      - install-dev
      - system-package

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
